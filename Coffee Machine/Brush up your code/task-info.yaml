type: edu
custom_name: stage6
files:
- name: machine/coffee_machine.py
  visible: true
  text: "water = 400\nmilk = 540\nbeans = 120\ncups = 9\nmoney = 550\nwhile True:\n\
    \    action = input(\"Write action (buy, fill, take, remaining, exit): \")\n \
    \   if action == 'remaining':\n        print(\"The coffee machine has:\")\n  \
    \      print(str(water) + \" ml of water\")\n        print(str(milk) + \"  ml\
    \ of milk\")\n        print(str(beans) + \" g of coffee beans\")\n        print(str(cups)\
    \ + \" disposable cups\")\n        print(\"$\" + str(money) + \" of money\")\n\
    \    elif action == 'buy':\n        order = input(\"What do you want to buy? 1\
    \ - espresso, 2 - latte, 3 - cappuccino, back - to main menu:\")\n        if order\
    \ == '1':\n            if water < 250 or beans < 16 or cups < 1:\n           \
    \     print(\"Sorry, not enough water!\")\n            else:\n               \
    \ water -= 250\n                milk -= 0\n                beans -= 16\n     \
    \           cups -= 1\n                money += 4\n                print(\"I have\
    \ enough resources, making you a coffee!\")\n        elif order == '2':\n    \
    \        if water < 350 or milk < 75 or beans < 20 or cups < 1:\n            \
    \    print(\"Sorry, not enough water!\")\n            else:\n                water\
    \ -= 350\n                milk -= 75\n                beans -= 20\n          \
    \      cups -= 1\n                money += 7\n                print(\"I have enough\
    \ resources, making you a coffee!\")\n        elif order == '3':\n           \
    \ if water < 200 or milk < 100 or beans < 12 or cups < 1:\n                print(\"\
    Sorry, not enough water!\")\n            else:\n                water -= 200\n\
    \                milk -= 100\n                beans -= 12\n                cups\
    \ -= 1\n                money += 6\n                print(\"I have enough resources,\
    \ making you a coffee!\")\n    elif action == 'back':\n        order = input(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main\
    \ menu:\")\n    elif action == 'fill':\n            addwater = input(\"Write how\
    \ many ml of water you want to add:\")\n            addmilk = input(\"Write how\
    \ many ml of milk you want to add:\")\n            addbeans = input(\"Write how\
    \ many grams of coffee beans you want to add:\")\n            addcups = input(\"\
    Write how many disposable cups of coffee you want to add:\")\n            water\
    \ += int(addwater) \n            milk += int(addmilk)\n            beans += int(addbeans)\n\
    \            cups += int(addcups)\n    elif action == 'take':\n        print(\"\
    I gave you $\" +str(money))\n        money = 0\n    elif action == 'exit':\n \
    \       break"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5795#comment
status: Solved
record: 5
